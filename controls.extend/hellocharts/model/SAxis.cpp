#include "stdafx.h"
#include "SAxis.h"

SNSBEGIN

//////////////////////////////////////////////////////////////////////////
// SAxis implementation

SAxis::SAxis()
    : m_bHasLines(TRUE)
    , m_lineColor(RGBA(200, 200, 200, 255))
    , m_bNameEnabled(FALSE)
    , m_textColor(RGBA(100, 100, 100, 255))
    , m_textSize(12)
    , m_maxLabelChars(5)
    , m_bInside(FALSE)
    , m_bInverted(FALSE)
    , m_bAutoGenerated(TRUE)
{
}

SAxis::SAxis(const SAxis& other)
    : m_bHasLines(other.m_bHasLines)
    , m_lineColor(other.m_lineColor)
    , m_name(other.m_name)
    , m_bNameEnabled(other.m_bNameEnabled)
    , m_textColor(other.m_textColor)
    , m_textSize(other.m_textSize)
    , m_maxLabelChars(other.m_maxLabelChars)
    , m_bInside(other.m_bInside)
    , m_bInverted(other.m_bInverted)
    , m_bAutoGenerated(other.m_bAutoGenerated)
{
    // Deep copy axis values
    for (size_t i = 0; i < other.m_values.size(); ++i)
    {
        if (other.m_values[i])
        {
            m_values.push_back(new SAxisValue(*other.m_values[i]));
        }
    }
}

SAxis::~SAxis()
{
    ClearValues();
}

void SAxis::SetValues(const std::vector<SAxisValue*>& values)
{
    ClearValues();
    for (size_t i = 0; i < values.size(); ++i)
    {
        if (values[i])
        {
            m_values.push_back(new SAxisValue(*values[i]));
        }
    }
}

void SAxis::AddValue(SAxisValue* pValue)
{
    if (pValue)
    {
        m_values.push_back(pValue);
    }
}

void SAxis::ClearValues()
{
    for (size_t i = 0; i < m_values.size(); ++i)
    {
        if (m_values[i])
        {
            delete m_values[i];
        }
    }
    m_values.clear();
}

SAxisValue* SAxis::GetValue(size_t index) const
{
    if (index < m_values.size())
    {
        return m_values[index];
    }
    return NULL;
}

//////////////////////////////////////////////////////////////////////////
// SAxisValue implementation

SAxisValue::SAxisValue()
    : m_value(0.0f)
{
}

SAxisValue::SAxisValue(float value)
    : m_value(value)
{
}

SAxisValue::SAxisValue(float value, const SStringT& label)
    : m_value(value)
    , m_label(label)
{
}

SAxisValue::SAxisValue(const SAxisValue& other)
    : m_value(other.m_value)
    , m_label(other.m_label)
{
}

SAxisValue::~SAxisValue()
{
}

SNSEND
